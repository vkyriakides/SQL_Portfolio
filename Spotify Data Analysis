/* CREATED BY VALERIA KYRIAKIDES
CREATE DATE: 10/05/2023
SPOTIFY DATA ANALYSIS
*/

-- For this project, I started by downloading Spotify data from Kaggle.
-- I then created a table to insert the data into.

-- creating the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

-- Then, I inserted the Spotify data .csv file into the table
-- I then explored the data using the following SQL:

-- getting an overview of what the data looks like:
SELECT
    *
FROM
    BIT_DB.Spotifydata;
 
   
--Answering some analytical questions:
    
-- What is the average danceability by artist and track?
SELECT
    AVG(danceability),
    artist_name,
    track_name
FROM
    BIT_DB.Spotifydata
GROUP BY
    track_name;
    
SELECT
    AVG(danceability),
    artist_name
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name;


-- Who are the top 10 artists based on popularity?
SELECT
    AVG(popularity),
    artist_name
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
ORDER BY 
    popularity DESC
LIMIT 10;

-- What artist released the longest song?
SELECT
    artist_name,
    track_name,
    MAX(duration_ms)
FROM
    BIT_DB.Spotifydata;


-- What's the average danceability for the 10 most popular songs?
SELECT
    AVG(danceability)
FROM
    BIT_DB.Spotifydata
LIMIT 10;


-- What are the top 10 songs with the fastest tempo, and who is the artist of that song?
SELECT
    artist_name,
    track_name,
    tempo
FROM
    BIT_DB.Spotifydata
ORDER BY 
    tempo DESC
LIMIT 10;


-- Which 3 artists have the most songs in the top 50?
SELECT
    COUNT(artist_name),
    artist_name
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
ORDER BY
    COUNT(artist_name) DESC
LIMIT 3;
    

-- What is the average popularity of each of the 3 artists with the most songs in the top 50?
SELECT
    COUNT(artist_name),
    artist_name,
    ROUND(AVG(popularity), 2) AS avg_popularity
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
ORDER BY     
    COUNT(artist_name) DESC
LIMIT 3;
    

-- which of those top 3 artists has the longest song duration on average?
SELECT
    artist_name,
    COUNT(artist_name),
    ROUND(AVG(duration_ms),1) as avg_duration
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
HAVING
    COUNT(artist_name) >=3
ORDER BY     
    avg_duration DESC
LIMIT 1;


-- Which songs have an instrumentalness score of 0? What is the artist of those songs?
SELECT
    track_name,
    artist_name,
    instrumentalness
FROM    
    BIT_DB.Spotifydata
WHERE
    instrumentalness = 0;
    

-- What are the top 5 popular tracks with a danceability rating that is greater than average?
SELECT
    AVG(danceability)
FROM
    BIT_DB.spotifydata;
-- avg danceability = 0.68572   
SELECT    
    track_name,
    popularity,
    danceability
FROM
    BIT_DB.spotifydata
WHERE
    danceability > 0.68572
ORDER BY
    popularity DESC
LIMIT 5;


--Calculate the average popularity for the artists. Then, for every
-- artist with an average popularity of 90 or above, show their name,
-- their average popularity, and label them as a "Top Star."    
WITH popularity_avg_CTE AS (
    SELECT
        s.artist_name,
        AVG(s.popularity) AS avg_popularity
    FROM
        SpotifyData s
    GROUP BY     
        S.artist_name
        )
SELECT
    artist_name,
    avg_popularity,
    'Top Star' AS tag
FROM
    popularity_avg_CTE
WHERE
    avg_popularity >= 90;
